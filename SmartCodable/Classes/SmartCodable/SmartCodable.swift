//  ____                               _      ____               _           _       _          _
// / ___|   _ __ ___     __ _   _ __  | |_   / ___|   ___     __| |   __ _  | |__   | |   ___  | |
// \___ \  | '_ ` _ \   / _` | | '__| | __| | |      / _ \   / _` |  / _` | | '_ \  | |  / _ \ | |
//  ___) | | | | | | | | (_| | | |    | |_  | |___  | (_) | | (_| | | (_| | | |_) | | | |  __/ |_|
// |____/  |_| |_| |_|  \__,_| |_|     \__|  \____|  \___/   \__,_|  \__,_| |_.__/  |_|  \___| (_)
//


public typealias SmartCodable = SmartDecodable & SmartEncodable


//MARK: - =========== 版本更新记录 ===========
// 【❌未完成   ✅已完成】

//MARK: - ～> V3 版本
// MARK: V3.0.0
/**
 * 1. ✅ 默认值支持
 *   - 说明：解码失败并且类型兼容失败，使用Model属性设置的默认值填充。
 *   - 结论：重写解码器，解码Model类型的时候，初始化该类型，通过Mirror方式获取并记录属性名以及对应的值。
 *
 * 2. ✅ 删除SmartOptional
 *   - 说明：不使用属性包装器解决模型属性的可选解析
 *   - 结论：放弃重写系统的JSONKeyedDecodingContainer的协议方法，该用重写整改解码器，自然就不会导致循环调用。
 *
 * 3. ✅ 属性包装器支持修饰struct
 *   - 说明：考虑到didfinishMapping的使用，属性包装器只能修饰class。
 *   - 结论：同2
 *
 * 4. ✅ 支持内置json字符串的对象化解析
 *   - 说明：字典中的值是可对象的json字符串（可以转字典或数组），目前不支持转义为对象解析。
 *   - 结论：内部判断类型，如果属性类型继承了SmartCodable，并且数据值是可对象的json字符串，就转义处理。
 *
 * 5. ✅ 解析key的映射支持Model内处理
 *   - 说明：像HandyJSON的mapping方法一样，支持Model内进行key的映射。
 *   - 结论：当前解码类型继承了SmartCodable，对当前codingPath路径下的key对应关系进行映射处理，
 *          即：ModelKeyMapper的功能。
 *
 * 6. ✅ 日志捕获优化
 *   - 说明：当解析失败，需要兼容时候，期望抛出相关日志，引起开发者警觉，做相应的优化处理（优化数据/优化属性声明）。
 *   - 结论：已经完成。
 *
 * 7. ❌ 性能优化
 *   - 说明：理论上SmartCodable的解析性能是劣于Codable，强于HandyJSON的。
 *          希望通过优化算法/逻辑实现/减少类型判断和转换，提升解析性能。
 *   - 结论：
 *
 * 8. ❌ 整体测试
 *   - 说明：穷尽测试场景，包含但不限于：
 *        数据测试：
 *          * 支持的所有类型的可选属性的测试（keyless / null / typeMismatch）
 *          * 支持的所有类型的非选属性的测试（keyless / null / typeMismatch）
 *          * 特殊类型（Date / Data / URL 等）
 *          * 多层级的嵌套结构
 *        功能测试：
 *          * key的映射
 *          * 解码完成的回调
 *          * WCDB的兼容性
 *
 * 9. ❌ 更新使用文档
 */

